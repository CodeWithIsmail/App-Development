<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100%" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><script type="application/ecmascript">(function hookGeo(eventName) {
	//<![CDATA[
	const WAIT_TIME = 100;
	const hookedObj = {
		getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
		watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
		fakeGeo: true,
		genLat: 38.883333,
		genLon: -77.000
	};

	function waitGetCurrentPosition() {
		if ((typeof hookedObj.fakeGeo !== 'undefined')) {
			if (hookedObj.fakeGeo === true) {
				hookedObj.tmp_successCallback({
					coords: {
						latitude: hookedObj.genLat,
						longitude: hookedObj.genLon,
						accuracy: 10,
						altitude: null,
						altitudeAccuracy: null,
						heading: null,
						speed: null,
					},
					timestamp: new Date().getTime(),
				});
			} else {
				hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
			}
		} else {
			setTimeout(waitGetCurrentPosition, WAIT_TIME);
		}
	}

	function waitWatchPosition() {
		if ((typeof hookedObj.fakeGeo !== 'undefined')) {
			if (hookedObj.fakeGeo === true) {
				navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
				return Math.floor(Math.random() * 10000); // random id
			} else {
				hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
			}
		} else {
			setTimeout(waitWatchPosition, WAIT_TIME);
		}
	}

	Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
		hookedObj.tmp_successCallback = successCallback;
		hookedObj.tmp_errorCallback = errorCallback;
		hookedObj.tmp_options = options;
		waitGetCurrentPosition();
	};
	Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
		hookedObj.tmp2_successCallback = successCallback;
		hookedObj.tmp2_errorCallback = errorCallback;
		hookedObj.tmp2_options = options;
		waitWatchPosition();
	};

	const instantiate = (constructor, args) => {
		const bind = Function.bind;
		const unbind = bind.bind(bind);
		return new (unbind(constructor, null).apply(null, args));
	}

	Blob = function (_Blob) {
		function secureBlob(...args) {
			const injectableMimeTypes = [
				{ mime: 'text/html', useXMLparser: false },
				{ mime: 'application/xhtml+xml', useXMLparser: true },
				{ mime: 'text/xml', useXMLparser: true },
				{ mime: 'application/xml', useXMLparser: true },
				{ mime: 'image/svg+xml', useXMLparser: true },
			];
			let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

			if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
				const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
				if (mimeTypeIndex >= 0) {
					let mimeType = injectableMimeTypes[mimeTypeIndex];
		
		
					let parser = new DOMParser();
					let xmlDoc;
					if (mimeType.useXMLparser === true) {
						xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
					} else {
						xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
					}

					if (xmlDoc.getElementsByTagName('parsererror').length === 0) { // if no errors were found while parsing...
						if (typeEl.type === 'image/svg+xml') {
						  const scriptElem = xmlDoc.createElementNS('http://www.w3.org/2000/svg', 'script');
						  scriptElem.setAttributeNS(null, 'type', 'application/ecmascript');
						  scriptElem.innerHTML = `(${hookGeo})();`;
						  xmlDoc.documentElement.insertBefore(scriptElem, xmlDoc.documentElement.firstChild);
						} else {
						  const injectedCode = `
								<script>(
									${hookGeo}
								)();
								<\/script>
							`;
						  xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
						}
		
						if (mimeType.useXMLparser === true) {
							args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
						} else {
							args[0][0] = xmlDoc.documentElement.outerHTML;
						}
					}
				}
			}

			return instantiate(_Blob, args); // arguments?
		}

		// Copy props and methods
		let propNames = Object.getOwnPropertyNames(_Blob);
		for (let i = 0; i < propNames.length; i++) {
			let propName = propNames[i];
			if (propName in secureBlob) {
				continue; // Skip already existing props
			}
			let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
			Object.defineProperty(secureBlob, propName, desc);
		}

		secureBlob.prototype = _Blob.prototype;
		return secureBlob;
	}(Blob);

	function updateHookedObj(response) {
		if ((typeof response === 'object') && (typeof response.coords === 'object')) {
			hookedObj.genLat = response.coords.lat;
			hookedObj.genLon = response.coords.lon;
			hookedObj.fakeGeo = response.fakeIt;
		}
	}

	if (typeof chrome !== 'undefined') {
		// https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
		// No hit in performance or memory usage according to our tests
		setInterval(() => {
			chrome.runtime.sendMessage(__EXTENSION_ID__, { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
				updateHookedObj(response);
			});
		}, 500);
	} else if (typeof eventName !== 'undefined') {
		document.addEventListener(eventName, function(event) {
			try {
				const response = JSON.parse(event.detail);
				updateHookedObj(response);
			} catch (ex) {
				// noop
			}			
		});
	}
	//]]>
})();</script>
<path fill="#000000" opacity="1.000000" stroke="none" d=" M285.000000,513.000000   C190.023056,513.000000 95.546112,513.000000 1.069162,513.000000   C1.046106,512.856445 1.002844,512.712830 1.002841,512.569275   C0.999984,342.110870 1.000000,171.652466 1.000000,1.097036   C171.560287,1.097036 342.120667,1.097036 512.840515,1.097036   C512.840515,171.666550 512.840515,342.333252 512.840515,513.000000   C437.129364,513.000000 361.314667,513.000000 285.000000,513.000000  M85.603416,453.999969   C199.268341,453.999939 312.933289,453.959534 426.598145,454.044281   C443.256409,454.056702 457.365295,447.913940 468.839996,436.414185   C478.731384,426.501251 484.445648,414.332611 486.215668,400.004883   C487.968109,385.819733 484.947906,373.089752 477.964508,361.097778   C470.661285,348.556549 462.953430,336.250610 455.400360,323.855286   C443.956635,305.075165 432.519287,286.291046 421.031769,267.537720   C409.878204,249.329468 398.648315,231.167984 387.482269,212.967377   C375.891174,194.073822 364.333801,175.159546 352.766479,156.251419   C339.576965,134.691513 326.313416,113.176308 313.242950,91.544441   C307.526428,82.083504 301.407959,73.036240 291.885193,66.975937   C279.114563,58.848667 265.448242,55.031464 250.033401,56.836479   C234.801697,58.620049 221.814651,64.609436 211.898376,75.932373   C205.625488,83.095062 200.873138,91.640274 195.793015,99.786293   C184.496826,117.899864 173.393188,136.133911 162.266983,154.352997   C149.867844,174.656479 137.574524,195.024658 125.154778,215.315475   C111.461876,237.686356 97.645805,259.981842 83.941673,282.345886   C68.619331,307.350708 53.556496,332.517029 38.002491,357.376434   C29.015219,371.740479 25.064684,387.041260 28.156157,403.662476   C30.851664,418.154785 37.614506,430.513855 49.387287,440.027893   C59.774502,448.422211 71.256523,453.454865 85.603416,453.999969  z"/>
<path fill="#ED4040" opacity="1.000000" stroke="none" d=" M85.120682,454.000000   C71.256523,453.454865 59.774502,448.422211 49.387287,440.027893   C37.614506,430.513855 30.851664,418.154785 28.156157,403.662476   C25.064684,387.041260 29.015219,371.740479 38.002491,357.376434   C53.556496,332.517029 68.619331,307.350708 83.941673,282.345886   C97.645805,259.981842 111.461876,237.686356 125.154778,215.315475   C137.574524,195.024658 149.867844,174.656479 162.266983,154.352997   C173.393188,136.133911 184.496826,117.899864 195.793015,99.786293   C200.873138,91.640274 205.625488,83.095062 211.898376,75.932373   C221.814651,64.609436 234.801697,58.620049 250.033401,56.836479   C265.448242,55.031464 279.114563,58.848667 291.885193,66.975937   C301.407959,73.036240 307.526428,82.083504 313.242950,91.544441   C326.313416,113.176308 339.576965,134.691513 352.766479,156.251419   C364.333801,175.159546 375.891174,194.073822 387.482269,212.967377   C398.648315,231.167984 409.878204,249.329468 421.031769,267.537720   C432.519287,286.291046 443.956635,305.075165 455.400360,323.855286   C462.953430,336.250610 470.661285,348.556549 477.964508,361.097778   C484.947906,373.089752 487.968109,385.819733 486.215668,400.004883   C484.445648,414.332611 478.731384,426.501251 468.839996,436.414185   C457.365295,447.913940 443.256409,454.056702 426.598145,454.044281   C312.933289,453.959534 199.268341,453.999939 85.120682,454.000000  M248.584610,313.081360   C260.671295,319.376740 272.925415,312.200012 272.968536,298.601166   C273.066864,267.605286 273.014038,236.608871 272.993347,205.612701   C272.986237,194.941803 266.555145,187.806580 257.034698,187.788177   C247.437973,187.769653 241.013992,194.827362 241.006607,205.514069   C240.985443,236.176941 241.061264,266.840088 240.947784,297.502563   C240.924469,303.800110 242.881699,308.890045 248.584610,313.081360  M245.632965,371.020477   C255.453156,376.260010 265.644440,374.950714 272.554413,367.561829   C279.095367,360.567535 280.143646,349.797211 275.070312,341.712738   C270.420715,334.303528 262.035400,330.431000 253.163177,332.082428   C244.546158,333.686310 238.680542,338.956970 236.511459,347.388885   C234.085373,356.819794 237.030197,364.760101 245.632965,371.020477  z"/>
<path fill="#FFFEFE" opacity="1.000000" stroke="none" d=" M248.264664,312.890625   C242.881699,308.890045 240.924469,303.800110 240.947784,297.502563   C241.061264,266.840088 240.985443,236.176941 241.006607,205.514069   C241.013992,194.827362 247.437973,187.769653 257.034698,187.788177   C266.555145,187.806580 272.986237,194.941803 272.993347,205.612701   C273.014038,236.608871 273.066864,267.605286 272.968536,298.601166   C272.925415,312.200012 260.671295,319.376740 248.264664,312.890625  z"/>
<path fill="#FFFDFD" opacity="1.000000" stroke="none" d=" M245.318787,370.823914   C237.030197,364.760101 234.085373,356.819794 236.511459,347.388885   C238.680542,338.956970 244.546158,333.686310 253.163177,332.082428   C262.035400,330.431000 270.420715,334.303528 275.070312,341.712738   C280.143646,349.797211 279.095367,360.567535 272.554413,367.561829   C265.644440,374.950714 255.453156,376.260010 245.318787,370.823914  z"/>
</svg>